УРОК 1
1. Создать новый проект в Android studio без поддержки Kotlin.
2. Сконфигурировать Kotlin в новом проекте (лучше вручную).
3. Перевести MainActivity на Kotlin.
4. *Добавить кнопку в разметку и повесить на нее clickListener в Activity.
5. Убедиться, что все работает.
Для тех, кто хочет доработать старое приложение или написать свое собственное.
1. Перевести весь проект на Kotlin или написать базовые экраны для вашего приложения.

УРОК 2
1. Создать структуру пакетов приложения.
2. Реализовать классы доступа к данным.
3. Создать разметку главного экрана.
3.1 Вынести размеры в dimens.xml, а строки в strings.xml.
4. Создать классы UI и убедиться, что все работает.
5. *В классе Repository обойтись без блока init и метода getNotes().
6.*В методе bind() класса ViewHolder попробовать использовать функцию with(note) { } из стандартной библиотеки Kotlin.

УРОК 3
1. Создать разметку и класс NoteActivity.
2. Добавить enum в класс Note и создать ресурсы цветов.
3. Изменить метод отображения заметки в существующей Activity.
4. Создать метод отображения заметки в NoteActivity.
5. Создать NoteViewModel и механизм сохранения изменений заметки.
6. Добавить функционал создания новой заметки.
7. *Попробовать использовать лямбда-выражения вместо создания анонимных классов с помощью object.

УРОК 4
1. Добавить приложение в Firebase.
2. Добавить необходимые зависимости в проект и убедиться, что все работает.
3. Реализовать классы для работы с Firestore (FirestoreProvider, Repository).
4. Вынести общую логику в базовые классы.
5. Модифицировать классы приложения в соответствии с новой структурой.
6. *Попробовать использовать лямбда-выражения вместо анонимных классов, где это возможно.

УРОК 5
1. Выполнить рефакторинг кода приложения с использованием лямбда-выражений и функций расширения.
2. Настроить методы авторизации в консоли Firebase и добавить зависимости в проект.
3. Добавить в FireStoreProvider функциональность авторизации.
4. Добавить проверку авторизации в BaseActivity.
5. Добавить SplashActivity.
6. Реализовать возможность выхода из аккаунта.

УРОК 6
1. Включить экспериментальные функции плагина в build.gradle, добавить в зависимости библиотеку Anko.
2. Провести рефакторинг, используя новые возможности.
3. Добавить функциональность удаления заметки.
4. Создать кастомные View.
5. Добавить созданные элементы в экран редактирования заметки и реализовать изменение ее цвета.
6. *Добавить индикаторы загрузки данных.
7. Реализовать инъекцию зависимостей в приложении.

ДОП ВОПРОС - ЧЕМ ОТЛИЧАЕТСЯ DI ОТ SL
помоему так - при DI все классы требуют явных зависимостей,
а при SL могут принять контейнер из которого "сами все вытащат", чем делают зависимости неявными.
Вот мне почему то кажется что явные зависимости и читаются лучше и тестируются лучше,
хотя буковок в коде и больше.

УРОК 7
1. Добавить зависимости в build.gradle. DONE
2. Написать тесты для MainViewModel. DONE
3. Написать тесты для FireStoreProvider, рассмотренные на уроке. DONE
4. *Написать тесты для остальных классов ViewModel. DONE NoteViewModel для SplashViewModel не писал
5. *Написать тесты для оставшихся методов FireStoreProvider. DONE
6. Написать тесты для NoteActivity. DONE
7. Написать тесты для MainActivity. DONE

УРОК 8
1. Добавить зависимости.
2. Выполнить рефакторинг слоя данных.
3. Провести рефакторинг слоя отображения.
4.*Переписать тесты с использованием корутин.